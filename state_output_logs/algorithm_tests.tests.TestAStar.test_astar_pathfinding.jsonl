{'line_number': 66, 'code_line': 'grid1 = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'variables': {}, 'file': 'tests'}
{'line_number': 73, 'code_line': 'path1 = a_star(grid1, (0, 0), (4, 4))', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]'}, 'file': 'tests'}
{'line_number': 29, 'code_line': 'start_node = Node(start, h=heuristic(start, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 0)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 30, 'code_line': 'open_list = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 31, 'code_line': 'heapq.heappush(open_list, start_node)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]'}, 'file': 'test3'}
{'line_number': 33, 'code_line': 'closed_set = set()', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f90a10>]'}, 'file': 'test3'}
{'line_number': 35, 'code_line': 'while open_list:\n    current_node = heapq.heappop(open_list)\n    if current_node.position == goal:\n        path = []\n        while current_node:\n            path.append(current_node.position)\n            current_node = current_node.parent\n        return path[::-1]\n    closed_set.add(current_node.position)\n    for neighbor_pos in get_neighbors(grid, current_node):\n        if neighbor_pos in closed_set:\n            continue\n        neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n        neighbor.parent = current_node\n        existing = [n for n in open_list if n.position == neighbor_pos]\n        if existing:\n            if neighbor.g < existing[0].g:\n                open_list.remove(existing[0])\n                heapq.heappush(open_list, neighbor)\n        else:\n            heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f90a10>]', 'closed_set': 'set{}'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f90a10>]', 'closed_set': 'set{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '1', 'dy': '0', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1), (1, 0)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1), (1, 0)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, -1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1), (1, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, -1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1), (1, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 0)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1), (1, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 0)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 1)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f915b0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f915b0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 0)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 0)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 0)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 0)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 0)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 0)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f915b0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f915b0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f915b0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f915b0>, <algorithm_tests.test3.Node object at 0x104f91b20>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2), (1, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2), (1, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 0)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2), (1, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2), (1, 1), (0, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2), (1, 1), (0, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 1)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2), (1, 1), (0, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 1)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>, <algorithm_tests.test3.Node object at 0x104f92750>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>, <algorithm_tests.test3.Node object at 0x104f92750>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 1)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>, <algorithm_tests.test3.Node object at 0x104f92750>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>, <algorithm_tests.test3.Node object at 0x104f92750>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>, <algorithm_tests.test3.Node object at 0x104f92750>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>, <algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>, <algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91b20>, <algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 1)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 1)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 0)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 1)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 1), (2, 0)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 1), (2, 0)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, -1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 1), (2, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, -1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 1), (2, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 0)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 1), (2, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 0)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 1), (2, 0), (0, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 0)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 1)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 1)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92c00>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92c00>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92c00>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92c00>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 0)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92c00>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92c00>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92750>, <algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3), (1, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3), (1, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3), (1, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3), (1, 2), (0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3), (1, 2), (0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 2)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3), (1, 2), (0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 2)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91910>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91910>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91910>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91910>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91910>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92c00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2), (2, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2), (2, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2), (2, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2), (2, 1), (1, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2), (2, 1), (1, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2), (2, 1), (1, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 2), (2, 1), (1, 0), (0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 2)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91400>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91400>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91400>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91400>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 1)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 1)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 1)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 1)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 1)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 1)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91400>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91400>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91910>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(0, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4), (1, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4), (1, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4), (1, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4), (1, 3), (0, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4), (1, 3), (0, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 3)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4), (1, 3), (0, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 3)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93890>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93890>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91400>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93890>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3), (2, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3), (2, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3), (2, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3), (2, 2), (1, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3), (2, 2), (1, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3), (2, 2), (1, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 3), (2, 2), (1, 1), (0, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 3)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93890>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93890>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93890>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93890>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93890>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93890>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f91130>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f91130>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f91130>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f91130>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93650>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f91130>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(3, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(3, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2), (3, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2), (3, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 0)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2), (3, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2), (3, 1), (2, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2), (3, 1), (2, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2), (3, 1), (2, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 2), (3, 1), (2, 0), (1, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 2)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91130>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91130>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91130>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91130>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(3, 1)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(3, 1)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(3, 1)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(3, 1)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(3, 1)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(3, 1)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91130>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91130>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92b10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92b10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 0)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '4', 'h': '6'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '4', 'h': '6'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '4', 'h': '6'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '4', 'h': '6'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 0)', 'g': '4', 'h': '6'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92b10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92b10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92b10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92b10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92b10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92b10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93890>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92b10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (2, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (2, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (2, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (2, 3), (1, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (2, 3), (1, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (2, 3), (1, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (2, 3), (1, 2), (0, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92930>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92ab0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92ab0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92ab0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92ab0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91130>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92ab0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3), (3, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3), (3, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3), (3, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3), (3, 2), (2, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3), (3, 2), (2, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3), (3, 2), (2, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 3), (3, 2), (2, 1), (1, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92ab0>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92ab0>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92ab0>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92ab0>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(3, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92ab0>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92ab0>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f91670>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f91670>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f91670>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f91670>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92b10>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f91670>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(4, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(4, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2), (4, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2), (4, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 0)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2), (4, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2), (4, 1), (3, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2), (4, 1), (3, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2), (4, 1), (3, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 1)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 2), (4, 1), (3, 0), (2, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 1)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(3, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(3, 2)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91670>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91670>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91670>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91670>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(4, 1)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(4, 1)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(4, 1)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(4, 1)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(4, 1)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(4, 1)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91670>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91670>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93290>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93290>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(3, 0)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(3, 0)', 'g': '5', 'h': '5'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(3, 0)', 'g': '5', 'h': '5'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(3, 0)', 'g': '5', 'h': '5'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(3, 0)', 'g': '5', 'h': '5'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(3, 0)', 'g': '5', 'h': '5'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93290>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93290>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93290>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92ab0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4), (3, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4), (3, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4), (3, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4), (3, 3), (2, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4), (3, 3), (2, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4), (3, 3), (2, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4), (3, 3), (2, 2), (1, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(3, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91670>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(4, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(4, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3), (4, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3), (4, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3), (4, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3), (4, 2), (3, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3), (4, 2), (3, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3), (4, 2), (3, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 3), (4, 2), (3, 1), (2, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 2)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(3, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(3, 3)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93b00>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93b00>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93b00>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93b00>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(4, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93b00>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f93b00>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93290>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(4, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(4, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(4, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(5, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(5, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 0)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 2), (4, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(4, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 2), (4, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 2), (4, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 1)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 2), (4, 0), (3, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 1)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(4, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(4, 2)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91250>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91250>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91250>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91250>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(4, 0)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(4, 0)', 'g': '6', 'h': '4'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(4, 0)', 'g': '6', 'h': '4'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(4, 0)', 'g': '6', 'h': '4'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(4, 0)', 'g': '6', 'h': '4'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(4, 0)', 'g': '6', 'h': '4'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91250>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 0)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f91250>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698a70>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(2, 5)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(2, 5)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(3, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(3, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (2, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (2, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (2, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (2, 3), (1, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(3, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x105698830>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x105698830>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x105698830>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x105698830>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x105698830>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x105698830>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x105698830>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x105698830>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93b00>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x105698830>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(3, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(3, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(3, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(4, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(4, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (4, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (4, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (4, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (4, 3), (3, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (4, 3), (3, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (4, 3), (3, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (4, 3), (3, 2), (2, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(3, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92fc0>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x105698830>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x105698830>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x105698830>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x105698830>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(4, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x105698830>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x105698830>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f92150>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f92150>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f92150>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f92150>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91250>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f92150>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(4, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(4, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(4, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(5, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(5, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 3), (4, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(4, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 3), (4, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 3), (4, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 3), (4, 1), (3, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 2)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(4, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(4, 3)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 1)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x105698830>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(3, 5)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(3, 5)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(4, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(4, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4), (3, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4), (3, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4), (3, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4), (3, 3), (2, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(4, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f92150>]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f93d70>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92150>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(4, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(4, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(4, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(5, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(5, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4), (4, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(4, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4), (4, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4), (4, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4), (4, 2), (3, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(4, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]'}, 'file': 'test3'}
{'line_number': 58, 'code_line': 'if neighbor.g < existing[0].g:\n    open_list.remove(existing[0])\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 2)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f936b0>, <algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]'}, 'file': 'test3'}
{'line_number': 39, 'code_line': 'path = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]'}, 'file': 'test3'}
{'line_number': 40, 'code_line': 'while current_node:\n    path.append(current_node.position)\n    current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3), (0, 3)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3), (0, 3)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3), (0, 3), (0, 2)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3), (0, 3), (0, 2)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3), (0, 3), (0, 2), (0, 1)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3), (0, 3), (0, 2), (0, 1)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3), (0, 3), (0, 2), (0, 1), (0, 0)]'}, 'file': 'test3'}
{'line_number': 43, 'code_line': 'return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92930>, <algorithm_tests.test3.Node object at 0x104f92fc0>, <algorithm_tests.test3.Node object at 0x104f92390>, <algorithm_tests.test3.Node object at 0x104f93d10>, <algorithm_tests.test3.Node object at 0x104f93d70>]', 'closed_set': 'set{}', 'current_node': 'NoneType{}', 'neighbor_pos': '(3, 3)', 'neighbor': 'Node{}', 'existing': '[<algorithm_tests.test3.Node object at 0x104f936b0>]', 'path': '[(4, 4), (3, 4), (2, 4), (2, 3), (1, 3), (0, 3), (0, 2), (0, 1), (0, 0)]'}, 'file': 'test3'}
{'line_number': 74, 'code_line': 'self.assertIsNotNone(path1)', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]'}, 'file': 'tests'}
{'line_number': 75, 'code_line': 'if path1:\n    self.assertEqual(path1[0], (0, 0))\n    self.assertEqual(path1[-1], (4, 4))', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]'}, 'file': 'tests'}
{'line_number': 76, 'code_line': 'self.assertEqual(path1[0], (0, 0))', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]'}, 'file': 'tests'}
{'line_number': 77, 'code_line': 'self.assertEqual(path1[-1], (4, 4))', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]'}, 'file': 'tests'}
{'line_number': 80, 'code_line': 'grid2 = [[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]'}, 'file': 'tests'}
{'line_number': 87, 'code_line': 'path2 = a_star(grid2, (0, 0), (4, 4))', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]', 'grid2': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]'}, 'file': 'tests'}
{'line_number': 29, 'code_line': 'start_node = Node(start, h=heuristic(start, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 0)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 30, 'code_line': 'open_list = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 31, 'code_line': 'heapq.heappush(open_list, start_node)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]'}, 'file': 'test3'}
{'line_number': 33, 'code_line': 'closed_set = set()', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93e00>]'}, 'file': 'test3'}
{'line_number': 35, 'code_line': 'while open_list:\n    current_node = heapq.heappop(open_list)\n    if current_node.position == goal:\n        path = []\n        while current_node:\n            path.append(current_node.position)\n            current_node = current_node.parent\n        return path[::-1]\n    closed_set.add(current_node.position)\n    for neighbor_pos in get_neighbors(grid, current_node):\n        if neighbor_pos in closed_set:\n            continue\n        neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n        neighbor.parent = current_node\n        existing = [n for n in open_list if n.position == neighbor_pos]\n        if existing:\n            if neighbor.g < existing[0].g:\n                open_list.remove(existing[0])\n                heapq.heappush(open_list, neighbor)\n        else:\n            heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93e00>]', 'closed_set': 'set{}'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93e00>]', 'closed_set': 'set{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '1', 'dy': '0', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, -1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, -1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 0)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 0)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 1)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 1)', 'g': '1', 'h': '7'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f90950>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 0)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2), (0, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2), (0, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 1)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 2), (0, 0)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 1)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 2)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 2)', 'g': '2', 'h': '6'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91730>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91730>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91730>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 0)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3), (0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3), (0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 2)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 3), (0, 1)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 2)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 3)', 'g': '3', 'h': '5'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91d60>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91d60>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91d60>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 1)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(0, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4)]', 'dx': '1', 'dy': '0', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4), (0, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 2)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4), (0, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 3)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(0, 4), (0, 2)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 3)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 4)', 'g': '4', 'h': '4'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93080>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93080>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93080>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 2)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 5)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(0, 5)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (0, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (0, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 4)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(1, 4), (0, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 4)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(1, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(1, 4)', 'g': '5', 'h': '3'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x1056989b0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x1056989b0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x1056989b0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(1, 5)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(1, 5)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 4)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(2, 4), (0, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(0, 4)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 4)', 'g': '6', 'h': '2'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92810>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92810>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f92810>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(0, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(2, 5)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(2, 5)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(3, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(3, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (2, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (2, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (2, 3)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(3, 4), (2, 3), (1, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(1, 4)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(3, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(3, 4)', 'g': '7', 'h': '1'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(3, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91970>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91970>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(2, 3)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(2, 3)', 'g': '7', 'h': '3'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91970>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91970>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91970>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 3)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91970>, <algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91970>, <algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f91970>, <algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(1, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(3, 5)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(3, 5)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(4, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(4, 4)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(4, 4)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '0', 'dy': '-1', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(3, 3)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 25, 'code_line': 'neighbors.append(new_position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'node': 'Node{}', 'neighbors': '[(4, 4), (2, 4)]', 'dx': '-1', 'dy': '0', 'new_position': '(2, 4)'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 51, 'code_line': 'neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(4, 4)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(4, 4)', 'g': '8', 'h': '0'}, 'file': 'test3'}
{'line_number': 54, 'code_line': 'neighbor.parent = current_node', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 56, 'code_line': 'existing = [n for n in open_list if n.position == neighbor_pos]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 57, 'code_line': 'if existing:\n    if neighbor.g < existing[0].g:\n        open_list.remove(existing[0])\n        heapq.heappush(open_list, neighbor)\nelse:\n    heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(4, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 12, 'code_line': 'return self.f < other.f', 'variables': {'self': 'Node{}', 'other': 'Node{}'}, 'file': 'test3'}
{'line_number': 48, 'code_line': 'if neighbor_pos in closed_set:\n    continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f90080>, <algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 49, 'code_line': 'continue', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f90080>, <algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f90080>, <algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 39, 'code_line': 'path = []', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]'}, 'file': 'test3'}
{'line_number': 40, 'code_line': 'while current_node:\n    path.append(current_node.position)\n    current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4), (0, 3)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4), (0, 3)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4), (0, 3), (0, 2)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4), (0, 3), (0, 2)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4), (0, 3), (0, 2), (0, 1)]'}, 'file': 'test3'}
{'line_number': 41, 'code_line': 'path.append(current_node.position)', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4), (0, 3), (0, 2), (0, 1)]'}, 'file': 'test3'}
{'line_number': 42, 'code_line': 'current_node = current_node.parent', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'Node{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4), (0, 3), (0, 2), (0, 1), (0, 0)]'}, 'file': 'test3'}
{'line_number': 43, 'code_line': 'return path[::-1]', 'variables': {'grid': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f917f0>]', 'closed_set': 'set{}', 'current_node': 'NoneType{}', 'neighbor_pos': '(2, 4)', 'neighbor': 'Node{}', 'existing': '[]', 'path': '[(4, 4), (3, 4), (2, 4), (1, 4), (0, 4), (0, 3), (0, 2), (0, 1), (0, 0)]'}, 'file': 'test3'}
{'line_number': 88, 'code_line': 'self.assertIsNotNone(path2)', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]', 'grid2': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'path2': '[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]'}, 'file': 'tests'}
{'line_number': 91, 'code_line': 'grid3 = [[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]', 'grid2': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'path2': '[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]'}, 'file': 'tests'}
{'line_number': 98, 'code_line': 'path3 = a_star(grid3, (0, 0), (4, 4))', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]', 'grid2': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'path2': '[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]', 'grid3': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]'}, 'file': 'tests'}
{'line_number': 29, 'code_line': 'start_node = Node(start, h=heuristic(start, goal))', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)'}, 'file': 'test3'}
{'line_number': 15, 'code_line': 'return abs(b[0] - a[0]) + abs(b[1] - a[1])', 'variables': {'a': '(0, 0)', 'b': '(4, 4)'}, 'file': 'test3'}
{'line_number': 5, 'code_line': 'self.position = position', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 6, 'code_line': 'self.g = g', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 7, 'code_line': 'self.h = h', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 8, 'code_line': 'self.f = g + h', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 9, 'code_line': 'self.parent = None', 'variables': {'self': 'Node{}', 'position': '(0, 0)', 'g': '0', 'h': '8'}, 'file': 'test3'}
{'line_number': 30, 'code_line': 'open_list = []', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 31, 'code_line': 'heapq.heappush(open_list, start_node)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]'}, 'file': 'test3'}
{'line_number': 33, 'code_line': 'closed_set = set()', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93cb0>]'}, 'file': 'test3'}
{'line_number': 35, 'code_line': 'while open_list:\n    current_node = heapq.heappop(open_list)\n    if current_node.position == goal:\n        path = []\n        while current_node:\n            path.append(current_node.position)\n            current_node = current_node.parent\n        return path[::-1]\n    closed_set.add(current_node.position)\n    for neighbor_pos in get_neighbors(grid, current_node):\n        if neighbor_pos in closed_set:\n            continue\n        neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n        neighbor.parent = current_node\n        existing = [n for n in open_list if n.position == neighbor_pos]\n        if existing:\n            if neighbor.g < existing[0].g:\n                open_list.remove(existing[0])\n                heapq.heappush(open_list, neighbor)\n        else:\n            heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93cb0>]', 'closed_set': 'set{}'}, 'file': 'test3'}
{'line_number': 36, 'code_line': 'current_node = heapq.heappop(open_list)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[<algorithm_tests.test3.Node object at 0x104f93cb0>]', 'closed_set': 'set{}'}, 'file': 'test3'}
{'line_number': 38, 'code_line': 'if current_node.position == goal:\n    path = []\n    while current_node:\n        path.append(current_node.position)\n        current_node = current_node.parent\n    return path[::-1]', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 45, 'code_line': 'closed_set.add(current_node.position)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 47, 'code_line': 'for neighbor_pos in get_neighbors(grid, current_node):\n    if neighbor_pos in closed_set:\n        continue\n    neighbor = Node(neighbor_pos, g=current_node.g + 1, h=heuristic(neighbor_pos, goal))\n    neighbor.parent = current_node\n    existing = [n for n in open_list if n.position == neighbor_pos]\n    if existing:\n        if neighbor.g < existing[0].g:\n            open_list.remove(existing[0])\n            heapq.heappush(open_list, neighbor)\n    else:\n        heapq.heappush(open_list, neighbor)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 18, 'code_line': 'neighbors = []', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}'}, 'file': 'test3'}
{'line_number': 19, 'code_line': 'for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    new_position = (node.position[0] + dx, node.position[1] + dy)\n    if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n        neighbors.append(new_position)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '1', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(0, 1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '1', 'dy': '0', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '-1', 'new_position': '(1, 0)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '0', 'dy': '-1', 'new_position': '(0, -1)'}, 'file': 'test3'}
{'line_number': 20, 'code_line': 'new_position = (node.position[0] + dx, node.position[1] + dy)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '-1', 'dy': '0', 'new_position': '(0, -1)'}, 'file': 'test3'}
{'line_number': 22, 'code_line': 'if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and (grid[new_position[0]][new_position[1]] != 1):\n    neighbors.append(new_position)', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 0)'}, 'file': 'test3'}
{'line_number': 26, 'code_line': 'return neighbors', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'node': 'Node{}', 'neighbors': '[]', 'dx': '-1', 'dy': '0', 'new_position': '(-1, 0)'}, 'file': 'test3'}
{'line_number': 64, 'code_line': 'return None', 'variables': {'grid': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'start': '(0, 0)', 'goal': '(4, 4)', 'start_node': 'Node{}', 'open_list': '[]', 'closed_set': 'set{}', 'current_node': 'Node{}'}, 'file': 'test3'}
{'line_number': 99, 'code_line': 'self.assertIsNone(path3)', 'variables': {'grid1': '[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]', 'path1': '[(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (2, 4), (3, 4), (4, 4)]', 'grid2': '[[0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]', 'path2': '[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]', 'grid3': '[[0, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]]', 'path3': 'NoneType{}'}, 'file': 'tests'}
