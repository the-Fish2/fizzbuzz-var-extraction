{'line_number': 105, 'code_line': "graph1 = {'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'variables': {}, 'file': 'tests'}
{'line_number': 113, 'code_line': "traversal1 = depth_first_search(graph1, 'A')", 'variables': {'graph1': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}"}, 'file': 'tests'}
{'line_number': 2, 'code_line': 'if visited is None:\n    visited = set()', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'A'", 'visited': 'NoneType{}'}, 'file': 'test4'}
{'line_number': 3, 'code_line': 'visited = set()', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'A'", 'visited': 'NoneType{}'}, 'file': 'test4'}
{'line_number': 5, 'code_line': 'visited.add(start)', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'A'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 6, 'code_line': 'traversal_order = [start]', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'A'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 8, 'code_line': 'for neighbor in graph[start]:\n    if neighbor not in visited:\n        traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A']"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A']", 'neighbor': "'B'"}, 'file': 'test4'}
{'line_number': 10, 'code_line': 'traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A']", 'neighbor': "'B'"}, 'file': 'test4'}
{'line_number': 2, 'code_line': 'if visited is None:\n    visited = set()', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 5, 'code_line': 'visited.add(start)', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 6, 'code_line': 'traversal_order = [start]', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 8, 'code_line': 'for neighbor in graph[start]:\n    if neighbor not in visited:\n        traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B']"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B']", 'neighbor': "'A'"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B']", 'neighbor': "'D'"}, 'file': 'test4'}
{'line_number': 10, 'code_line': 'traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B']", 'neighbor': "'D'"}, 'file': 'test4'}
{'line_number': 2, 'code_line': 'if visited is None:\n    visited = set()', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'D'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 5, 'code_line': 'visited.add(start)', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'D'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 6, 'code_line': 'traversal_order = [start]', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'D'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 8, 'code_line': 'for neighbor in graph[start]:\n    if neighbor not in visited:\n        traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'D'", 'visited': 'set{}', 'traversal_order': "['D']"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'D'", 'visited': 'set{}', 'traversal_order': "['D']", 'neighbor': "'B'"}, 'file': 'test4'}
{'line_number': 12, 'code_line': 'return traversal_order', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'D'", 'visited': 'set{}', 'traversal_order': "['D']", 'neighbor': "'B'"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B', 'D']", 'neighbor': "'E'"}, 'file': 'test4'}
{'line_number': 10, 'code_line': 'traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B', 'D']", 'neighbor': "'E'"}, 'file': 'test4'}
{'line_number': 2, 'code_line': 'if visited is None:\n    visited = set()', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'E'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 5, 'code_line': 'visited.add(start)', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'E'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 6, 'code_line': 'traversal_order = [start]', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'E'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 8, 'code_line': 'for neighbor in graph[start]:\n    if neighbor not in visited:\n        traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'E'", 'visited': 'set{}', 'traversal_order': "['E']"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'E'", 'visited': 'set{}', 'traversal_order': "['E']", 'neighbor': "'B'"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'E'", 'visited': 'set{}', 'traversal_order': "['E']", 'neighbor': "'F'"}, 'file': 'test4'}
{'line_number': 10, 'code_line': 'traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'E'", 'visited': 'set{}', 'traversal_order': "['E']", 'neighbor': "'F'"}, 'file': 'test4'}
{'line_number': 2, 'code_line': 'if visited is None:\n    visited = set()', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'F'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 5, 'code_line': 'visited.add(start)', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'F'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 6, 'code_line': 'traversal_order = [start]', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'F'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 8, 'code_line': 'for neighbor in graph[start]:\n    if neighbor not in visited:\n        traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'F'", 'visited': 'set{}', 'traversal_order': "['F']"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'F'", 'visited': 'set{}', 'traversal_order': "['F']", 'neighbor': "'C'"}, 'file': 'test4'}
{'line_number': 10, 'code_line': 'traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'F'", 'visited': 'set{}', 'traversal_order': "['F']", 'neighbor': "'C'"}, 'file': 'test4'}
{'line_number': 2, 'code_line': 'if visited is None:\n    visited = set()', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'C'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 5, 'code_line': 'visited.add(start)', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'C'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 6, 'code_line': 'traversal_order = [start]', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'C'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 8, 'code_line': 'for neighbor in graph[start]:\n    if neighbor not in visited:\n        traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'C'", 'visited': 'set{}', 'traversal_order': "['C']"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'C'", 'visited': 'set{}', 'traversal_order': "['C']", 'neighbor': "'A'"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'C'", 'visited': 'set{}', 'traversal_order': "['C']", 'neighbor': "'F'"}, 'file': 'test4'}
{'line_number': 12, 'code_line': 'return traversal_order', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'C'", 'visited': 'set{}', 'traversal_order': "['C']", 'neighbor': "'F'"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'F'", 'visited': 'set{}', 'traversal_order': "['F', 'C']", 'neighbor': "'E'"}, 'file': 'test4'}
{'line_number': 12, 'code_line': 'return traversal_order', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'F'", 'visited': 'set{}', 'traversal_order': "['F', 'C']", 'neighbor': "'E'"}, 'file': 'test4'}
{'line_number': 12, 'code_line': 'return traversal_order', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'E'", 'visited': 'set{}', 'traversal_order': "['E', 'F', 'C']", 'neighbor': "'F'"}, 'file': 'test4'}
{'line_number': 12, 'code_line': 'return traversal_order', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B', 'D', 'E', 'F', 'C']", 'neighbor': "'E'"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A', 'B', 'D', 'E', 'F', 'C']", 'neighbor': "'C'"}, 'file': 'test4'}
{'line_number': 12, 'code_line': 'return traversal_order', 'variables': {'graph': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A', 'B', 'D', 'E', 'F', 'C']", 'neighbor': "'C'"}, 'file': 'test4'}
{'line_number': 114, 'code_line': 'self.assertEqual(len(traversal1), len(set(traversal1)))', 'variables': {'graph1': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'traversal1': "['A', 'B', 'D', 'E', 'F', 'C']"}, 'file': 'tests'}
{'line_number': 117, 'code_line': "graph2 = {'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'variables': {'graph1': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'traversal1': "['A', 'B', 'D', 'E', 'F', 'C']"}, 'file': 'tests'}
{'line_number': 123, 'code_line': "traversal2 = depth_first_search(graph2, 'A')", 'variables': {'graph1': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'traversal1': "['A', 'B', 'D', 'E', 'F', 'C']", 'graph2': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}"}, 'file': 'tests'}
{'line_number': 2, 'code_line': 'if visited is None:\n    visited = set()', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'A'", 'visited': 'NoneType{}'}, 'file': 'test4'}
{'line_number': 3, 'code_line': 'visited = set()', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'A'", 'visited': 'NoneType{}'}, 'file': 'test4'}
{'line_number': 5, 'code_line': 'visited.add(start)', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'A'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 6, 'code_line': 'traversal_order = [start]', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'A'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 8, 'code_line': 'for neighbor in graph[start]:\n    if neighbor not in visited:\n        traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A']"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A']", 'neighbor': "'B'"}, 'file': 'test4'}
{'line_number': 10, 'code_line': 'traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A']", 'neighbor': "'B'"}, 'file': 'test4'}
{'line_number': 2, 'code_line': 'if visited is None:\n    visited = set()', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'B'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 5, 'code_line': 'visited.add(start)', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'B'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 6, 'code_line': 'traversal_order = [start]', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'B'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 8, 'code_line': 'for neighbor in graph[start]:\n    if neighbor not in visited:\n        traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B']"}, 'file': 'test4'}
{'line_number': 9, 'code_line': 'if neighbor not in visited:\n    traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B']", 'neighbor': "'A'"}, 'file': 'test4'}
{'line_number': 12, 'code_line': 'return traversal_order', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'B'", 'visited': 'set{}', 'traversal_order': "['B']", 'neighbor': "'A'"}, 'file': 'test4'}
{'line_number': 12, 'code_line': 'return traversal_order', 'variables': {'graph': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A', 'B']", 'neighbor': "'B'"}, 'file': 'test4'}
{'line_number': 124, 'code_line': "self.assertEqual(set(traversal2), {'A', 'B'})", 'variables': {'graph1': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'traversal1': "['A', 'B', 'D', 'E', 'F', 'C']", 'graph2': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'traversal2': "['A', 'B']"}, 'file': 'tests'}
{'line_number': 127, 'code_line': "graph3 = {'A': []}", 'variables': {'graph1': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'traversal1': "['A', 'B', 'D', 'E', 'F', 'C']", 'graph2': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'traversal2': "['A', 'B']"}, 'file': 'tests'}
{'line_number': 128, 'code_line': "traversal3 = depth_first_search(graph3, 'A')", 'variables': {'graph1': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'traversal1': "['A', 'B', 'D', 'E', 'F', 'C']", 'graph2': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'traversal2': "['A', 'B']", 'graph3': "{'A': []}"}, 'file': 'tests'}
{'line_number': 2, 'code_line': 'if visited is None:\n    visited = set()', 'variables': {'graph': "{'A': []}", 'start': "'A'", 'visited': 'NoneType{}'}, 'file': 'test4'}
{'line_number': 3, 'code_line': 'visited = set()', 'variables': {'graph': "{'A': []}", 'start': "'A'", 'visited': 'NoneType{}'}, 'file': 'test4'}
{'line_number': 5, 'code_line': 'visited.add(start)', 'variables': {'graph': "{'A': []}", 'start': "'A'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 6, 'code_line': 'traversal_order = [start]', 'variables': {'graph': "{'A': []}", 'start': "'A'", 'visited': 'set{}'}, 'file': 'test4'}
{'line_number': 8, 'code_line': 'for neighbor in graph[start]:\n    if neighbor not in visited:\n        traversal_order.extend(depth_first_search(graph, neighbor, visited))', 'variables': {'graph': "{'A': []}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A']"}, 'file': 'test4'}
{'line_number': 12, 'code_line': 'return traversal_order', 'variables': {'graph': "{'A': []}", 'start': "'A'", 'visited': 'set{}', 'traversal_order': "['A']"}, 'file': 'test4'}
{'line_number': 129, 'code_line': "self.assertEqual(traversal3, ['A'])", 'variables': {'graph1': "{'A': ['B', 'C'], 'B': ['A', 'D', 'E'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['B', 'F'], 'F': ['C', 'E']}", 'traversal1': "['A', 'B', 'D', 'E', 'F', 'C']", 'graph2': "{'A': ['B'], 'B': ['A'], 'C': ['D'], 'D': ['C']}", 'traversal2': "['A', 'B']", 'graph3': "{'A': []}", 'traversal3': "['A']"}, 'file': 'tests'}
