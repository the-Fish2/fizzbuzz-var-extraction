{'line_number': 12, 'code_line': "graph = {'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'variables': {}, 'file': 'tests'}
{'line_number': 18, 'code_line': "distances, paths = dijkstra(graph, 'A')", 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}"}, 'file': 'tests'}
{'line_number': 4, 'code_line': "distances = {node: float('infinity') for node in graph}", 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'"}, 'file': 'test1'}
{'line_number': 5, 'code_line': 'distances[start] = 0', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': inf, 'B': inf, 'C': inf, 'D': inf}"}, 'file': 'test1'}
{'line_number': 7, 'code_line': 'pq = [(0, start)]', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': inf, 'C': inf, 'D': inf}"}, 'file': 'test1'}
{'line_number': 8, 'code_line': 'previous_nodes = {node: None for node in graph}', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': inf, 'C': inf, 'D': inf}", 'pq': "[(0, 'A')]"}, 'file': 'test1'}
{'line_number': 10, 'code_line': 'while pq:\n    current_distance, current_node = heapq.heappop(pq)\n    if current_distance > distances[current_node]:\n        continue\n    for neighbor, weight in graph[current_node].items():\n        distance = current_distance + weight\n        if distance < distances[neighbor]:\n            distances[neighbor] = distance\n            previous_nodes[neighbor] = current_node\n            heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': inf, 'C': inf, 'D': inf}", 'pq': "[(0, 'A')]", 'previous_nodes': "{'A': None, 'B': None, 'C': None, 'D': None}"}, 'file': 'test1'}
{'line_number': 11, 'code_line': 'current_distance, current_node = heapq.heappop(pq)', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': inf, 'C': inf, 'D': inf}", 'pq': "[(0, 'A')]", 'previous_nodes': "{'A': None, 'B': None, 'C': None, 'D': None}"}, 'file': 'test1'}
{'line_number': 13, 'code_line': 'if current_distance > distances[current_node]:\n    continue', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': inf, 'C': inf, 'D': inf}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': None, 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'"}, 'file': 'test1'}
{'line_number': 16, 'code_line': 'for neighbor, weight in graph[current_node].items():\n    distance = current_distance + weight\n    if distance < distances[neighbor]:\n        distances[neighbor] = distance\n        previous_nodes[neighbor] = current_node\n        heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': inf, 'C': inf, 'D': inf}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': None, 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'"}, 'file': 'test1'}
{'line_number': 17, 'code_line': 'distance = current_distance + weight', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': inf, 'C': inf, 'D': inf}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': None, 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'B'", 'weight': '4'}, 'file': 'test1'}
{'line_number': 19, 'code_line': 'if distance < distances[neighbor]:\n    distances[neighbor] = distance\n    previous_nodes[neighbor] = current_node\n    heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': inf, 'C': inf, 'D': inf}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': None, 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'B'", 'weight': '4', 'distance': '4'}, 'file': 'test1'}
{'line_number': 20, 'code_line': 'distances[neighbor] = distance', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': inf, 'C': inf, 'D': inf}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': None, 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'B'", 'weight': '4', 'distance': '4'}, 'file': 'test1'}
{'line_number': 21, 'code_line': 'previous_nodes[neighbor] = current_node', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': inf, 'D': inf}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': None, 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'B'", 'weight': '4', 'distance': '4'}, 'file': 'test1'}
{'line_number': 22, 'code_line': 'heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': inf, 'D': inf}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': 'A', 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'B'", 'weight': '4', 'distance': '4'}, 'file': 'test1'}
{'line_number': 17, 'code_line': 'distance = current_distance + weight', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': inf, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'C'", 'weight': '2', 'distance': '4'}, 'file': 'test1'}
{'line_number': 19, 'code_line': 'if distance < distances[neighbor]:\n    distances[neighbor] = distance\n    previous_nodes[neighbor] = current_node\n    heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': inf, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'C'", 'weight': '2', 'distance': '2'}, 'file': 'test1'}
{'line_number': 20, 'code_line': 'distances[neighbor] = distance', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': inf, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'C'", 'weight': '2', 'distance': '2'}, 'file': 'test1'}
{'line_number': 21, 'code_line': 'previous_nodes[neighbor] = current_node', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': 2, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': None, 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'C'", 'weight': '2', 'distance': '2'}, 'file': 'test1'}
{'line_number': 22, 'code_line': 'heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': 2, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': 'A', 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'C'", 'weight': '2', 'distance': '2'}, 'file': 'test1'}
{'line_number': 11, 'code_line': 'current_distance, current_node = heapq.heappop(pq)', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': 2, 'D': inf}", 'pq': "[(2, 'C'), (4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': 'A', 'D': None}", 'current_distance': '0', 'current_node': "'A'", 'neighbor': "'C'", 'weight': '2', 'distance': '2'}, 'file': 'test1'}
{'line_number': 13, 'code_line': 'if current_distance > distances[current_node]:\n    continue', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': 2, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'C'", 'weight': '2', 'distance': '2'}, 'file': 'test1'}
{'line_number': 16, 'code_line': 'for neighbor, weight in graph[current_node].items():\n    distance = current_distance + weight\n    if distance < distances[neighbor]:\n        distances[neighbor] = distance\n        previous_nodes[neighbor] = current_node\n        heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': 2, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'C'", 'weight': '2', 'distance': '2'}, 'file': 'test1'}
{'line_number': 17, 'code_line': 'distance = current_distance + weight', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': 2, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'B'", 'weight': '1', 'distance': '2'}, 'file': 'test1'}
{'line_number': 19, 'code_line': 'if distance < distances[neighbor]:\n    distances[neighbor] = distance\n    previous_nodes[neighbor] = current_node\n    heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': 2, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'B'", 'weight': '1', 'distance': '3'}, 'file': 'test1'}
{'line_number': 20, 'code_line': 'distances[neighbor] = distance', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 4, 'C': 2, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'B'", 'weight': '1', 'distance': '3'}, 'file': 'test1'}
{'line_number': 21, 'code_line': 'previous_nodes[neighbor] = current_node', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'A', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'B'", 'weight': '1', 'distance': '3'}, 'file': 'test1'}
{'line_number': 22, 'code_line': 'heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': inf}", 'pq': "[(4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'B'", 'weight': '1', 'distance': '3'}, 'file': 'test1'}
{'line_number': 17, 'code_line': 'distance = current_distance + weight', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': inf}", 'pq': "[(3, 'B'), (4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'D'", 'weight': '5', 'distance': '3'}, 'file': 'test1'}
{'line_number': 19, 'code_line': 'if distance < distances[neighbor]:\n    distances[neighbor] = distance\n    previous_nodes[neighbor] = current_node\n    heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': inf}", 'pq': "[(3, 'B'), (4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'D'", 'weight': '5', 'distance': '7'}, 'file': 'test1'}
{'line_number': 20, 'code_line': 'distances[neighbor] = distance', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': inf}", 'pq': "[(3, 'B'), (4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'D'", 'weight': '5', 'distance': '7'}, 'file': 'test1'}
{'line_number': 21, 'code_line': 'previous_nodes[neighbor] = current_node', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 7}", 'pq': "[(3, 'B'), (4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': None}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'D'", 'weight': '5', 'distance': '7'}, 'file': 'test1'}
{'line_number': 22, 'code_line': 'heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 7}", 'pq': "[(3, 'B'), (4, 'B')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'C'}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'D'", 'weight': '5', 'distance': '7'}, 'file': 'test1'}
{'line_number': 11, 'code_line': 'current_distance, current_node = heapq.heappop(pq)', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 7}", 'pq': "[(3, 'B'), (4, 'B'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'C'}", 'current_distance': '2', 'current_node': "'C'", 'neighbor': "'D'", 'weight': '5', 'distance': '7'}, 'file': 'test1'}
{'line_number': 13, 'code_line': 'if current_distance > distances[current_node]:\n    continue', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 7}", 'pq': "[(4, 'B'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'C'}", 'current_distance': '3', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '5', 'distance': '7'}, 'file': 'test1'}
{'line_number': 16, 'code_line': 'for neighbor, weight in graph[current_node].items():\n    distance = current_distance + weight\n    if distance < distances[neighbor]:\n        distances[neighbor] = distance\n        previous_nodes[neighbor] = current_node\n        heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 7}", 'pq': "[(4, 'B'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'C'}", 'current_distance': '3', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '5', 'distance': '7'}, 'file': 'test1'}
{'line_number': 17, 'code_line': 'distance = current_distance + weight', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 7}", 'pq': "[(4, 'B'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'C'}", 'current_distance': '3', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '3', 'distance': '7'}, 'file': 'test1'}
{'line_number': 19, 'code_line': 'if distance < distances[neighbor]:\n    distances[neighbor] = distance\n    previous_nodes[neighbor] = current_node\n    heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 7}", 'pq': "[(4, 'B'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'C'}", 'current_distance': '3', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 20, 'code_line': 'distances[neighbor] = distance', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 7}", 'pq': "[(4, 'B'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'C'}", 'current_distance': '3', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 21, 'code_line': 'previous_nodes[neighbor] = current_node', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': "[(4, 'B'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'C'}", 'current_distance': '3', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 22, 'code_line': 'heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': "[(4, 'B'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '3', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 11, 'code_line': 'current_distance, current_node = heapq.heappop(pq)', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': "[(4, 'B'), (7, 'D'), (6, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '3', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 13, 'code_line': 'if current_distance > distances[current_node]:\n    continue', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': "[(6, 'D'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '4', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 14, 'code_line': 'continue', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': "[(6, 'D'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '4', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 11, 'code_line': 'current_distance, current_node = heapq.heappop(pq)', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': "[(6, 'D'), (7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '4', 'current_node': "'B'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 13, 'code_line': 'if current_distance > distances[current_node]:\n    continue', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': "[(7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '6', 'current_node': "'D'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 16, 'code_line': 'for neighbor, weight in graph[current_node].items():\n    distance = current_distance + weight\n    if distance < distances[neighbor]:\n        distances[neighbor] = distance\n        previous_nodes[neighbor] = current_node\n        heapq.heappush(pq, (distance, neighbor))', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': "[(7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '6', 'current_node': "'D'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 11, 'code_line': 'current_distance, current_node = heapq.heappop(pq)', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': "[(7, 'D')]", 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '6', 'current_node': "'D'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 13, 'code_line': 'if current_distance > distances[current_node]:\n    continue', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '7', 'current_node': "'D'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 14, 'code_line': 'continue', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '7', 'current_node': "'D'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 24, 'code_line': 'return (distances, previous_nodes)', 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'start': "'A'", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'pq': '[]', 'previous_nodes': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}", 'current_distance': '7', 'current_node': "'D'", 'neighbor': "'D'", 'weight': '3', 'distance': '6'}, 'file': 'test1'}
{'line_number': 21, 'code_line': "self.assertEqual(distances['A'], 0)", 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'paths': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}"}, 'file': 'tests'}
{'line_number': 22, 'code_line': "self.assertEqual(distances['B'], 3)", 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'paths': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}"}, 'file': 'tests'}
{'line_number': 23, 'code_line': "self.assertEqual(distances['D'], 6)", 'variables': {'graph': "{'A': {'B': 4, 'C': 2}, 'B': {'D': 3}, 'C': {'B': 1, 'D': 5}, 'D': {}}", 'distances': "{'A': 0, 'B': 3, 'C': 2, 'D': 6}", 'paths': "{'A': None, 'B': 'C', 'C': 'A', 'D': 'B'}"}, 'file': 'tests'}
