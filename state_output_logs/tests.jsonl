{
  "line_number": 1,
  "code_line": "'\\nSample unit test set for fizzbuzz.py.\\n'",
  "variables": {}
}{
  "line_number": 5,
  "code_line": "import unittest",
  "variables": {}
}{
  "line_number": 6,
  "code_line": "from tests.fizzbuzz import fizzbuzz",
  "variables": {
    "unittest": "module{}"
  }
}{
  "line_number": 7,
  "code_line": "from tests.point import TwoPoint",
  "variables": {
    "unittest": "module{}"
  }
}{
  "line_number": 9,
  "code_line": "class TestFizzBuzz(unittest.TestCase):\n\n    def test_fizz(self) -> None:\n        for i in [3, 6, 9]:\n            assert fizzbuzz(i) == 'Fizz'\n\n    def test_buzz(self) -> None:\n        for i in [10, 20, 35]:\n            assert fizzbuzz(i) == 'Buzz'\n\n    def test_fizzbuzz(self) -> None:\n        for i in [15, 90, 150]:\n            assert fizzbuzz(i) == 'FizzBuzz'",
  "variables": {
    "unittest": "module{}"
  }
}{
  "line_number": 23,
  "code_line": "class TestGeneralFizzBuzz(unittest.TestCase):\n\n    def test_fizz(self) -> None:\n        for i in [1, 2, 4, 7, 8, 394]:\n            assert fizzbuzz(i) == str(i)",
  "variables": {
    "unittest": "module{}"
  }
}{
  "line_number": 28,
  "code_line": "class TestCustomRepresentation(unittest.TestCase):\n\n    def test_custom_representation(self) -> None:\n        z = TwoPoint()\n        z.x1 = 3\n        z.changeValue(17)\n        assert z.x1 == 17",
  "variables": {
    "unittest": "module{}"
  }
}{
  "line_number": 36,
  "code_line": "if __name__ == '__main__':\n    unittest.main()",
  "variables": {
    "unittest": "module{}"
  }
}{
  "line_number": 30,
  "code_line": "z = TwoPoint()",
  "variables": {}
}{
  "line_number": 31,
  "code_line": "z.x1 = 3",
  "variables": {
    "z": "TwoPoint{x1: 2, x2: 2, x3: Point{x: 0, y: 0}}"
  }
}{
  "line_number": 32,
  "code_line": "z.changeValue(17)",
  "variables": {
    "z": "TwoPoint{x1: 3, x2: 2, x3: Point{x: 0, y: 0}}"
  }
}{
  "line_number": 33,
  "code_line": "assert z.x1 == 17",
  "variables": {
    "z": "TwoPoint{x1: 17, x2: 2, x3: Point{x: 0, y: 0}}"
  }
}{
  "line_number": 15,
  "code_line": "for i in [10, 20, 35]:\n    assert fizzbuzz(i) == 'Buzz'",
  "variables": {}
}{
  "line_number": 16,
  "code_line": "assert fizzbuzz(i) == 'Buzz'",
  "variables": {
    "i": "10"
  }
}{
  "line_number": 16,
  "code_line": "assert fizzbuzz(i) == 'Buzz'",
  "variables": {
    "i": "20"
  }
}{
  "line_number": 16,
  "code_line": "assert fizzbuzz(i) == 'Buzz'",
  "variables": {
    "i": "35"
  }
}{
  "line_number": 11,
  "code_line": "for i in [3, 6, 9]:\n    assert fizzbuzz(i) == 'Fizz'",
  "variables": {}
}{
  "line_number": 12,
  "code_line": "assert fizzbuzz(i) == 'Fizz'",
  "variables": {
    "i": "3"
  }
}{
  "line_number": 12,
  "code_line": "assert fizzbuzz(i) == 'Fizz'",
  "variables": {
    "i": "6"
  }
}{
  "line_number": 12,
  "code_line": "assert fizzbuzz(i) == 'Fizz'",
  "variables": {
    "i": "9"
  }
}{
  "line_number": 19,
  "code_line": "for i in [15, 90, 150]:\n    assert fizzbuzz(i) == 'FizzBuzz'",
  "variables": {}
}{
  "line_number": 20,
  "code_line": "assert fizzbuzz(i) == 'FizzBuzz'",
  "variables": {
    "i": "15"
  }
}{
  "line_number": 20,
  "code_line": "assert fizzbuzz(i) == 'FizzBuzz'",
  "variables": {
    "i": "90"
  }
}{
  "line_number": 20,
  "code_line": "assert fizzbuzz(i) == 'FizzBuzz'",
  "variables": {
    "i": "150"
  }
}{
  "line_number": 25,
  "code_line": "for i in [1, 2, 4, 7, 8, 394]:\n    assert fizzbuzz(i) == str(i)",
  "variables": {}
}{
  "line_number": 26,
  "code_line": "assert fizzbuzz(i) == str(i)",
  "variables": {
    "i": "1"
  }
}{
  "line_number": 26,
  "code_line": "assert fizzbuzz(i) == str(i)",
  "variables": {
    "i": "2"
  }
}{
  "line_number": 26,
  "code_line": "assert fizzbuzz(i) == str(i)",
  "variables": {
    "i": "4"
  }
}{
  "line_number": 26,
  "code_line": "assert fizzbuzz(i) == str(i)",
  "variables": {
    "i": "7"
  }
}{
  "line_number": 26,
  "code_line": "assert fizzbuzz(i) == str(i)",
  "variables": {
    "i": "8"
  }
}{
  "line_number": 26,
  "code_line": "assert fizzbuzz(i) == str(i)",
  "variables": {
    "i": "394"
  }
}